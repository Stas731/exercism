=begin
1.) Ваш друг отслеживает идентификатор каждого вагона (ID), но он никогда не знает, сколько вагонов системе придется обработать в любой момент времени. 
Для остальной части логистической программы было бы гораздо проще объединить эти данные в единый массив .

Реализуйте метод generate_list_of_wagons(), который принимает произвольное количество идентификаторов вагонов. Каждый идентификатор будет положительным целым числом. 
Затем метод должен returnпередать данные идентификаторы в виде одного массива .

LocomotiveEngineer.generate_list_of_wagons(1, 7, 12, 3, 14, 8, 5)
# => [1, 7, 12, 3, 14, 8, 5]

2.) На этом этапе вы начинаете понимать данные и то, как они используются в логистической программе. Система идентификации всегда присваивает локомотиву идентификатор 1 , 
а остальным вагонам в поезде присваивается случайно выбранный идентификатор больше 1 .

Вашему другу пришлось подключить к поезду два новых вагона и он забыл обновить систему! Теперь первые два вагона состава необходимо отодвинуть в конец, иначе все выйдет из строя.

Еще больше усложняет ситуацию то, что ваш друг только что обнаружил второй массив , который, по-видимому, содержит недостающие идентификаторы вагонов. Все, что они могут запомнить, 
это то, что после перемещения новых вагонов идентификаторы из этого второго массива должны быть размещены непосредственно после назначенного локомотива.

Линус был бы вам очень признателен за исправление допущенных ошибок и консолидацию данных.

Реализуйте метод fix_list_of_wagons(), который принимает два массива , содержащие идентификаторы вагонов. Он должен переместить первые два элемента первого массива в конец и вставить 
значения из второго массива позади ( с правой стороны ) идентификатора локомотива ( 1 ). Затем метод должен содержать массивreturn с изменениями.

LocomotiveEngineer.fix_list_of_wagons([2, 5, 1, 7, 4, 12, 6, 3, 13], [3, 17, 6, 15])
# => [1, 3, 17, 6, 15, 7, 4, 12, 6, 3, 13, 2, 5]

3.) Теперь, когда все данные о вагонах верны, Линус хотел бы, чтобы вы обновили информацию о маршруте в системе. На транспортном маршруте поезд может останавливаться на нескольких разных 
станциях, чтобы забрать и/или высадить груз. В каждом путешествии может быть разное количество промежуточных пунктов доставки. Ваш друг хотел бы, чтобы вы обновили хэш системной маршрутизации , 
добавив в него недостающую/дополнительную информацию о доставке.

Реализуйте метод , который принимает хэшadd_missing_stops() маршрутизации, за которым следует переменное количество аргументов ключевого слова. Эти аргументы могут быть в форме хеша, 
содержащего одну или несколько остановок, или любого количества пар ключевых слов. Затем ваш метод должен вернуть хеш маршрутизации, обновленный дополнительным ключом , который содержит 
массив всех добавленных остановок по порядку.stop_<number>: "city"

LocomotiveEngineer.add_missing_stops({from: "New York", to: "Miami"},
                    stop_1: "Washington, DC", stop_2: "Charlotte", stop_3: "Atlanta",
                    stop_4: "Jacksonville", stop_5: "Orlando")
# => {from: "New York", to: "Miami", stops: ["Washington, DC", "Charlotte", "Atlanta", "Jacksonville", "Orlando"]}

4.) Линус работал над программой маршрутизации и заметил, что на некоторых маршрутах отсутствуют некоторые важные детали. Первоначальная информация о маршруте была создана в виде хеша , 
и ваш друг хотел бы, чтобы вы обновили этот хеш , добавив в него все отсутствующие данные. Каждый маршрут в системе требует немного разных деталей, поэтому Линус предпочел бы общее решение.

Реализуйте метод extend_route_information(), который принимает два хеша . Первый хэш содержит города отправления и назначения, между которыми курсирует поезд.

Второй хеш содержит другие сведения о маршруте, такие как скорость, длина или температура поезда. Метод должен возвращать консолидированный хэш со всей информацией о маршрутизации.

Примечание
Второй хэш может содержать другие/больше свойств, чем показано в примере.

LocomotiveEngineer.extend_route_information({"from": "Berlin", "to": "Hamburg"}, {"length": "100", "speed": "50"})
# => {"from": "Berlin", "to": "Hamburg", "length": "100", "speed": "50"}
=end

class LocomotiveEngineer
  def self.generate_list_of_wagons(*arguments) 
     arguments
  end

  def self.fix_list_of_wagons(each_wagons_id, missing_wagons)
   a, b, c, *d = each_wagons_id
    arr = c,*missing_wagons, *d, a, b
    arr
  end

  def self.add_missing_stops(route, **additional_stops)
    stops_array = additional_stops.values
    updated_route = route.merge({ stops: stops_array })
    updated_route
  end
  def self.extend_route_information(route, more_route_information)
    #route.merge(more_route_information)
    combined_fruits_inventory = {**route, **more_route_information}
  end
end



p LocomotiveEngineer.extend_route_information({"from": "Berlin", "to": "Hamburg"}, {"length": "100", "speed": "50"})